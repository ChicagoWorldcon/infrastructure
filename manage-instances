#!/bin/bash -e

# Stop the current instances
HERE=$(unset CDPATH; cd $(dirname $0); pwd)

get_state() {
    api_instance_id=$(terraform output reg_instance_id)
    db_instance_id=$(terraform output db_instance_id)
    api_status=$(
        aws --profile chicago \
        ec2 describe-instances --instance-id $api_instance_id | \
            jq -r '.Reservations[0].Instances[0].State.Name'
              )
    
    db_status=$(
        aws --profile chicago \
            rds describe-db-instances \
            --db-instance-identifier $db_instance_id | \
            jq -r '.DBInstances[0].DBInstanceStatus'
             )
}

stop() {
    get_state

    # if the API is not stopped, stop that first
    if [ $api_status != stopped ]; then
        aws --profile chicago \
            ec2 stop-instances \
            --instance-ids $api_instance_id
    else
        echo "Instance $api_instance_id is already stopped"
    fi

    if [ $db_status != stopped ]; then
        aws --profile chicago \
            rds stop-db-instance \
            --db-instance-identifier $db_instance_id
    else
        echo "Instance $db_instance_id is already stopped"
    fi
}

start() {
    get_state

    # if the API is not running, stop that first
    if [ $api_status != running ]; then
        aws --profile chicago \
            ec2 start-instances \
            --instance-ids $api_instance_id
    else
        echo "Instance $api_instance_id is already running"
    fi

    if [ $db_status != available ]; then
        aws --profile chicago \
            rds start-db-instance \
            --db-instance-identifier $db_instance_id
    else
        echo "Instance $db_instance_id is already available"
    fi
}

${1:?"A command (start|stop) must be provided"}
