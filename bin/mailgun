#!/usr/bin/env python
from __future__ import annotations

from datetime import datetime, timedelta
from email import utils
from pprint import pprint
from textwrap import fill, indent, wrap
from typing import Any, Dict
from urllib.parse import urlencode

import attr
import click
import httpx
from tenacity import RetryError, Retrying, retry
from tenacity.retry import retry_if_exception_type
from tenacity.stop import stop_after_attempt

START_TIME = datetime.utcnow() - timedelta(days=4)


@attr.s(auto_attribs=True)
class MailgunAPIConfig:
    api_key: str = attr.ib(repr=False)
    base_url: str = attr.ib(default="https://api.mailgun.net")
    domain: str = attr.ib(default="comms.chicon.org")
    domain_url: str = attr.ib(init=False)

    def __attrs_post_init__(self):
        self.domain_url = f"{self.base_url}/v3/{self.domain}"

    def url(self, operation: str, **query_args):
        encoded_args = urlencode(query_args)
        return f"{self.domain_url}/{operation}?{encoded_args}"


@click.group()
@click.option("--api-key", required=True)
@click.pass_context
def main(ctx, api_key):
    ctx.obj = MailgunAPIConfig(api_key=api_key)


@main.group()
def events():
    ...


@events.command()
@click.option("--start-date", default=START_TIME, type=click.DateTime())
@click.option("--end-date", default=None, type=click.DateTime())
@click.pass_obj
def get(mailgun: MailgunAPIConfig, start_date: datetime, end_date: datetime | None):
    if end_date is None:
        end_date = datetime.utcnow()

    with httpx.Client(
        auth=("api", mailgun.api_key), headers={"Accept": "message/rfc2822"}
    ) as client:
        for attempt in Retrying(stop=stop_after_attempt(2), retry=retry_if_exception_type(httpx.NetworkError)):
            with attempt:
                resp = client.get(
                    mailgun.url(
                        "events",
                        limit=300,
                        begin=utils.format_datetime(end_date),
                        end=utils.format_datetime(start_date),
                        event="failed OR rejected OR complained OR unsubscribed",
                    )
                )
                resp.raise_for_status()

            print(resp.url)
            events = resp.json()["items"]
            print(f"{len(events)} items")
            for event in events:
                {
                    "failed": handle_failed,
                    "rejected": handle_rejected,
                    "complained": handle_complained,
                }[event["event"]](event)


@events.command()
@click.argument("address_search")
@click.pass_obj
def recipient_events(mailgun: MailgunAPIConfig, address_search: str):
    end_date = datetime.utcnow()
    start_date = START_TIME

    with httpx.Client(
        auth=("api", mailgun.api_key), headers={"Accept": "message/rfc2822"}
    ) as client:
        resp = client.get(
            mailgun.url(
                "events",
                limit=100,
                begin=utils.format_datetime(end_date),
                end=utils.format_datetime(start_date),
                to=address_search,
            )
        )

    events = resp.json()["items"]
    print(f"{len(events)} items")
    unhandled_events = set()
    for event in events:
        handler = {
            "failed": handle_failed,
            "rejected": handle_rejected,
            "complained": handle_complained,
        }.get(event["event"], None)

        if not handler:
            unhandled_events.add(event["event"])
            continue
        try:
            handler(event)
        except Exception as e:
            print(e)
            print(event)
            break

    nl = "\n"
    print(f"Unhandled event types: \n{nl.join(unhandled_events)}")


def event_ts(event: Dict[str, Any]) -> datetime:
    return datetime.fromtimestamp(event["timestamp"])

def event_sender(event: Dict[str, Any]) -> str:
    try:
        return event['message']['headers']['from']
    except KeyError:
        breakpoint()
        return 'unknown'
    

def handle_delivered(event: Dict[str, Any]):
    from_address = event_sender(event)
    print(f"{event['event']}: {event_ts(event)}\t{event['recipient']}")


def handle_failed(event: Dict[str, Any]):
    try:
        detail: str = event["delivery-status"]["message"]
        detail_lines = detail.splitlines()
        wrapped_lines = [
            fill(line, width=80, initial_indent="    ", subsequent_indent="    ")
            for line in detail_lines
        ]
        detail_text = "\n" + "\n".join(wrapped_lines)
    except KeyError:
        detail_text = ""

    from_address = event_sender(event)
    print(
        f"{event['event']}: {event_ts(event)}\t{from_address} -> {event['recipient']}\t{event['severity']}{detail_text}"
    )


def handle_rejected(event: Dict[str, Any]):
    from_address = event_sender(event)
    print(f"{event['event']}: {event_ts(event)}\t{from_address} -> ", event)


def handle_complained(event: Dict[str, Any]):
    from_address = event_sender(event)
    print(f"{event['event']}: {event_ts(event)}\t{from_address} -> {event['recipient']}\t{event['event']}")


if __name__ == "__main__":
    main(auto_envvar_prefix="MAILGUN")
